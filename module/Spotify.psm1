# ---------
# DO NOT EDIT THIS FILE. This file is auto-generated by Build.ps1.
# ---------

<#
.SYNOPSIS
Save albums.

.DESCRIPTION
Save one or more albums to the current user's 'Your Music' library.

.PARAMETER AlbumId
Album ID. A maximum of 50 IDs can be sent in one request.

.EXAMPLE
Add-SpotifyAlbum -ArtistId "2CIMQHirSU0MQqyYHq0eOx"

.EXAMPLE
Add-SpotifyAlbum "2CIMQHirSU0MQqyYHq0eOx", "1vCWHaC5f2uS3yhpwWbIA6"

.EXAMPLE
"2CIMQHirSU0MQqyYHq0eOx", 57dN52uHvrHOxijzpIgu3E", "1vCWHaC5f2uS3yhpwWbIA6" | Add-SpotifyArtist

.EXAMPLE
Get-SpotifyPlaylistTracks "3cEYpjA9oz9GiPac4AsH4n" | ForEach-Object { $_.album } | Add-SpotifyAlbum

.FUNCTIONALITY
Album

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/save-albums-user
#>
function Add-SpotifyAlbum {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 50)]
        [string[]] $AlbumId
    )
    
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/albums" `
            -Method Put `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" `
            -Body ([PSCustomObject]@{ ids = $AlbumId } | ConvertTo-Json)
    }
}

<#
.SYNOPSIS
Get album.

.DESCRIPTION 
Get Spotify catalog information for a single album.

.PARAMETER AlbumId
The Spotify ID of the album. Example value: "4aawyAB9vmqN3uQ7FjRGTy".

.EXAMPLE
Get-SpotifyAlbum -AlbumId "4aawyAB9vmqN3uQ7FjRGTy"

.FUNCTIONALITY
Album

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-album
#>
function Get-SpotifyAlbum {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $AlbumId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/albums/$($AlbumId)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
        | ForEach-Object { 
            @() + $_ + $_.artists | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }
}

<#
.SYNOPSIS
Get album tracks.

.DESCRIPTION
Get Spotify catalog information about an album’s tracks. 

.PARAMETER AlbumId
The Spotify ID of the album. Example value: "4aawyAB9vmqN3uQ7FjRGTy".

.EXAMPLE
Get-SpotifyAlbumTracks "4aawyAB9vmqN3uQ7FjRGTy"

.EXAMPLE
Get-SpotifySavedAlbums | Get-SpotifyAlbumTracks

.FUNCTIONALITY
Album

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-albums-tracks
#>
function Get-SpotifyAlbumTracks {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $AlbumId
    )

    process {
        $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/albums/$($AlbumId)/tracks?limit=50" }
        & { while ($r.next -and !$e) {
                $r = Invoke-RestMethod `
                    -Uri $r.next `
                    -Method Get `
                    -Authentication Bearer `
                    -Token $global:SpotifyToken `
                    -ContentType "application/json" `
                    -ErrorVariable "e"; $r 
            } 
        } 
        | Select-Object -ExpandProperty items
        | ForEach-Object { 
            @() + $_ + $_.artists 
            | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }
}

<#
.SYNOPSIS
Get new releases.

.DESCRIPTION
Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).

.EXAMPLE
Get-SpotifyNewReleases

.EXAMPLE
Get-SpotifyNewReleases | Get-SpotifyAlbumTracks

.FUNCTIONALITY
Album

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-new-releases
#>
function Get-SpotifyNewReleases {
   
    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/browse/new-releases?limit=50" }
    & { while ($r.next -and !$e) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -ErrorVariable "e" | Select-Object -ExpandProperty albums; $r 
        } 
    } 
    | Select-Object -ExpandProperty items
    | ForEach-Object { 
        @() + $_ + $_.artists | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}

<#
.SYNOPSIS
Get saved albums.

.DESCRIPTION
Get a list of the albums saved in the current Spotify user's 'Your Music' library.

.EXAMPLE
Get-SpotifySavedAlbums

.EXAMPLE
Get-SpotifySavedAlbums | Get-SpotifyAlbumTracks

.FUNCTIONALITY
Album

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-saved-albums
#>
function Get-SpotifySavedAlbums {
    
    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/albums?limit=50" }
    & { while ($r.next -and !$e) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -ErrorVariable "e"; $r 
        } 
    } 
    | Select-Object -ExpandProperty items
    | Select-Object -ExpandProperty album -Property * -ExcludeProperty album
    | ForEach-Object { 
        @() + $_ + $_.artists | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}

<#
.SYNOPSIS
Remove albums.

.DESCRIPTION
Remove one or more albums from the current user's 'Your Music' library.

.PARAMETER AlbumId
Album ID. A maximum of 50 IDs can be sent in one request.

.EXAMPLE
Remove-SpotifyAlbum -ArtistId "2CIMQHirSU0MQqyYHq0eOx"

.EXAMPLE
Remove-SpotifyAlbum "2CIMQHirSU0MQqyYHq0eOx", "1vCWHaC5f2uS3yhpwWbIA6"

.EXAMPLE
"2CIMQHirSU0MQqyYHq0eOx", 57dN52uHvrHOxijzpIgu3E", "1vCWHaC5f2uS3yhpwWbIA6" | Remove-SpotifyAlbum

.FUNCTIONALITY
Album

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/remove-albums-user
#>
function Remove-SpotifyAlbum {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 50)]
        [string[]] $AlbumId
    )
    
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/albums" `
            -Method Delete `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" `
            -Body ([PSCustomObject]@{ ids = $AlbumId } | ConvertTo-Json)
    }
}

<#
.SYNOPSIS
Follow artists.

.DESCRIPTION
Add the current user as a follower of one or more artists.

.PARAMETER ArtistId
Artist ID. A maximum of 50 IDs can be sent in one request.

.EXAMPLE
Add-SpotifyArtist -ArtistId "2CIMQHirSU0MQqyYHq0eOx"

.EXAMPLE
"2CIMQHirSU0MQqyYHq0eOx", "57dN52uHvrHOxijzpIgu3E", "1vCWHaC5f2uS3yhpwWbIA6" | Add-SpotifyArtist

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/unfollow-artists-users
#>
function Add-SpotifyArtist {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 50)]
        [string[]] $ArtistId
    )
    
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/following?type=artist" `
            -Method Put `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" `
            -Body ([PSCustomObject]@{ ids = $ArtistId } | ConvertTo-Json)
    }
}

<#
.SYNOPSIS
Get artist.

.DESCRIPTION 
Get Spotify catalog information for a single artist identified by their unique Spotify ID.

.PARAMETER ArtistId
The Spotify ID of the artist. Example value: "0TnOYISbd1XYRBk9myaseg".

.EXAMPLE
Get-SpotifyArtist "0TnOYISbd1XYRBk9myaseg"

.EXAMPLE
"2CIMQHirSU0MQqyYHq0eOx", "57dN52uHvrHOxijzpIgu3E", "1vCWHaC5f2uS3yhpwWbIA6" | Get-SpotifyArtist

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-artist
#>
function Get-SpotifyArtist {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")] 
        [ValidateNotNullOrEmpty()]
        [string] $ArtistId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/artists/$($ArtistId)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
    }
}

<#
.SYNOPSIS
Get artist's albums.

.DESCRIPTION
Get Spotify catalog information about an artist's albums.

.PARAMETER ArtistId
The Spotify ID of the artist. Example value: "0TnOYISbd1XYRBk9myaseg".

.EXAMPLE
Get-SpotifyArtistAlbums "0TnOYISbd1XYRBk9myaseg"

.EXAMPLE
Get-SpotifySavedArtists | Get-SpotifyArtistAlbums

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-artists-albums
#>
function Get-SpotifyArtistAlbums {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $ArtistId
    )

    process {
        $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/artists/$($ArtistId)/albums?limit=50" }
        & { while ($r.next -and !$e) {
                $r = Invoke-RestMethod `
                    -Uri $r.next `
                    -Method Get `
                    -Authentication Bearer `
                    -Token $global:SpotifyToken `
                    -ContentType "application/json" `
                    -ErrorVariable "e"; $r 
            } 
        } 
        | Select-Object -ExpandProperty items
        | ForEach-Object { 
            @() + $_ + $_.artists | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }
}

<#
.SYNOPSIS
Get artist's related artists.

.DESCRIPTION 
Get Spotify catalog information about artists similar to a given artist.

.PARAMETER ArtistId
The Spotify ID of the artist. Example value: "0TnOYISbd1XYRBk9myaseg".

.EXAMPLE
Get-SpotifyArtistRelatedArtists "0TnOYISbd1XYRBk9myaseg"

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-artists-related-artists
#>
function Get-SpotifyArtistRelatedArtists {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")] 
        [ValidateNotNullOrEmpty()]
        [string] $ArtistId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/artists/$($ArtistId)/related-artists" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" 
        | Select-Object -ExpandProperty artists
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
    }
}

<#
.SYNOPSIS
Get artist's top tracks.

.DESCRIPTION 
Get Spotify catalog information about an artist's top tracks by country.

.PARAMETER ArtistId
The Spotify ID of the artist. Example value: "0TnOYISbd1XYRBk9myaseg".

.PARAMETER Market
An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. Example value: "ES".

.EXAMPLE
Get-SpotifyArtistTopTracks "0TnOYISbd1XYRBk9myaseg"

.EXAMPLE
Get-SpotifySavedArtists | Get-SpotifyArtistTopTracks

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-an-artists-top-tracks
#>
function Get-SpotifyArtistTopTracks {
    [CmdletBinding(PositionalBinding = $false)]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")] 
        [ValidateNotNullOrEmpty()]
        [string] $ArtistId,

        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string] $Market = "US"
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/artists/$($ArtistId)/top-tracks?market=$($Market)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" 
        | Select-Object -ExpandProperty tracks
        | ForEach-Object { 
            @() + $_ + $_.artists + $_.album + $_.album.artists 
            | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }
}

<#
.SYNOPSIS
Get followed artists.

.DESCRIPTION
Get the current user's followed artists.

.EXAMPLE 
Get-SpotifySavedArtists

.EXAMPLE
Get-SpotifySavedArtists 
| Get-SpotifyArtistTopTracks 
| Sort-Object { Get-Random } 
| Add-SpotifyPlaylistTracks "56twaZEs2xHEr1kL5AXpIL"

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-followed
#>
function Get-SpotifySavedArtists {
    
    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/following?type=artist&limit=50" }
    & { while ($r.next -and !$e) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -ErrorVariable "e" | Select-Object -ExpandProperty artists; $r 
        } 
    } 
    | Select-Object -ExpandProperty items
    | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
}

<#
.SYNOPSIS
Unfollow artists.

.DESCRIPTION
Remove the current user as a follower of one or more artists.

.PARAMETER ArtistId
Artist ID. A maximum of 50 IDs can be sent in one request.

.EXAMPLE
Remove-SpotifyArtist -ArtistId "2CIMQHirSU0MQqyYHq0eOx"

.EXAMPLE
"2CIMQHirSU0MQqyYHq0eOx", "57dN52uHvrHOxijzpIgu3E", "1vCWHaC5f2uS3yhpwWbIA6" | Remove-SpotifyArtist

.FUNCTIONALITY
Artist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/follow-artists-users
#>
function Remove-SpotifyArtist {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 50)]
        [string[]] $ArtistId
    )
    
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/following?type=artist" `
            -Method Delete `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" `
            -Body ([PSCustomObject]@{ ids = $ArtistId } | ConvertTo-Json)
    }
}

<#
.SYNOPSIS
Get Available genre seeds.

.DESCRIPTION
Retrieve a list of available genres seed parameter values for recommendations.

.EXAMPLE
Get-SpotifyGenres

.FUNCTIONALITY
Genre

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-recommendation-genres
#>
function Get-SpotifyGenres {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/recommendations/available-genre-seeds" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" | Select-Object -ExpandProperty genres
}

<#
.SYNOPSIS
Get available markets.

.DESCRIPTION
Get the list of markets where Spotify is available.

.EXAMPLE
Get-SpotifyMarkets

.FUNCTIONALITY
Market

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-available-markets
#>
function Get-SpotifyMarkets {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/markets" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" | Select-Object -ExpandProperty markets
}

<#
.SYNOPSIS
Requests a new authorization token for Spotify Web API.

.PARAMETER ClientId
Application client id (copy from Spotify dashboard).

.PARAMETER AuthorizationCode
Autorization code which you get after completing authentication.

.PARAMETER PassThru
Write results to pipeline.

.PARAMETER StatePath
Path to a file to store client information and autorization token.

.PARAMETER Scope
Predefined list of scopes. Full access by default.

.EXAMPLE
New-SpotifyAccessToken -ClientId "id" -Scope "playlist-modify-private", "user-follow-read"

.EXAMPLE
New-SpotifyAccessToken -AutorizationCode "code"

.EXAMPLE
$code_url = New-SpotifyAccessToken -ClientId "id" -PassThru

.FUNCTIONALITY
Base

.LINK
https://developer.spotify.com/dashboard/applications

.LINK
https://developer.spotify.com/documentation/general/guides/authorization/scopes
#>
function New-SpotifyAccessToken {
    [CmdletBinding(PositionalBinding = $false)]
    param(

        [Parameter(Mandatory = $true, ParameterSetName = "Init")]
        [string] $ClientId,
        
        [Parameter(ParameterSetName = "Init")]
        [string[]] $Scope = @(
            "ugc-image-upload",
            "user-modify-playback-state",
            "user-read-playback-state",
            "user-read-currently-playing",
            "user-follow-modify",
            "user-follow-read",
            "user-read-recently-played",
            "user-read-playback-position",
            "user-top-read",
            "playlist-read-collaborative",
            "playlist-modify-public",
            "playlist-read-private",
            "playlist-modify-private",
            "app-remote-control",
            "streaming",
            "user-read-email",
            "user-read-private",
            "user-library-modify",
            "user-library-read"),

        [Parameter(Mandatory = $true, ParameterSetName = "Code")]
        [string] $AuthorizationCode,

        [switch] $PassThru,

        [string] $StatePath = "$HOME/.spotify-pwsh-state"
    )

    if (!$AuthorizationCode) {
        $state = [PSCustomObject]@{
            ClientId     = $ClientId
            CodeVerifier = "{0:N}{1:N}" -f (New-Guid), (New-Guid)
            Token        = $null
        }

        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create("sha256")
        $challenge = $sha256.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($state.CodeVerifier))

        $challengeBase64 = [Convert]::ToBase64String($challenge)
        $challengeBase64 = $challengeBase64.Replace("+", "-")
        $challengeBase64 = $challengeBase64.Replace("/", "_")
        $challengeBase64 = $challengeBase64.TrimEnd("=")

        $url = "https://accounts.spotify.com/authorize?client_id=$($ClientId)&response_type=code&scope=$($Scope)&redirect_uri=https://lennyomg.github.io/Spotify-PowerShell/index.html&code_challenge_method=S256&code_challenge=$($challengeBase64)" -replace " ", "%20"
        
        if ($PassThru) {
            Write-Output $url
        }
        else {
            Write-Host "Open the link in your browser and authenticate in Spotify."
            Write-Host ""
            Write-Host $url
            Write-Host ""
        }

        $global:SpotifyToken = $null
    }
    else {
        $state = Get-Content $StatePath | ConvertFrom-Json -Depth 99
        $state.Token = Invoke-RestMethod `
            -Uri "https://accounts.spotify.com/api/token" `
            -Method Post `
            -Body "grant_type=authorization_code&code=$($AuthorizationCode)&redirect_uri=https://lennyomg.github.io/Spotify-PowerShell/index.html&client_id=$($state.ClientId)&code_verifier=$($state.CodeVerifier)" `
            -ContentType "application/x-www-form-urlencoded"

        $global:SpotifyToken = ConvertTo-SecureString $state.Token.access_token -AsPlainText -Force
        $state.CodeVerifier = $null

        if ($PassThru) {
            Write-Output $state.Token
        }
    }

    $state | ConvertTo-Json -Depth 99 | Out-File -Path $StatePath -Force
}

<#
.SYNOPSIS
Add item to playback queue.

.DESCRIPTION
Add an item to the end of the user's current playback queue.

.PARAMETER Uri
The uri of the item to add to the queue. Must be a track or an episode uri.
Example value: "spotify:track:4iV5W9uYEdYUVa79Axb7Rh".

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/add-to-queue
#>
function Add-SpotifyQueueItem {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [string] $ItemUri,

        [Parameter(Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/player/queue?uri=$($ItemUri)$($DeviceId ? "&device_id=$($DeviceId)" : $null)" `
            -Method Post `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
    }
}

<#
.SYNOPSIS
Get currently playing tracks.

.DESCRIPTION
Get the object currently being played on the user's Spotify account.

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-the-users-currently-playing-track
#>
function Get-SpotifyCurrentlyPlaying {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/currently-playing" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Get available devices.

.DESCRIPTION
Get information about a user’s available devices. Returns empty list if there is no active devices.

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-a-users-available-devices
#>
function Get-SpotifyDevices {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/devices" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" | Select-Object -ExpandProperty devices
}

<#
.SYNOPSIS
Get playback state.

.DESCRIPTION
Get information about the user’s current playback state, including track or episode, progress, and active device.
Returns emtpy object if there is not active playback.

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-information-about-the-users-current-playback
#>
function Get-SpotifyPlaybackState {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Get the user's queue.

.DESCRIPTION
Get the list of objects that make up the user's queue.

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-queue
#>
function Get-SpotifyQueue {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/queue" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
    | Select-Object -ExpandProperty queue
    | ForEach-Object { 
        @() + $_ + $_.artists + $_.album + $_.album.artists 
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}

<#
.SYNOPSIS
Get recently played tracks.

.DESCRIPTION
Get tracks from the current user's recently played tracks. Note: Currently doesn't support podcast episodes.

.EXAMPLE
Get-SpotifyRecentlyPlayed

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-recently-played
#>
function Get-SpotifyRecentlyPlayed {
    
    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/player/recently-played?limit=50" }
    & { while ($r.next -and !$e) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -ErrorVariable "e"; $r 
        } 
    } 
    | Select-Object -ExpandProperty items
    | Select-Object -ExpandProperty track -Property * -ExcludeProperty track
    | ForEach-Object { 
        @() + $_ + $_.artists + $_.album + $_.album.artists 
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}

<#
.SYNOPSIS
Transfer playback.

.DESCRIPTION
Transfer playback to a new device and determine if it should start playing.

.PARAMETER DeviceId
ID of the device on which playback should be started/transferred.

.EXAMPLE
Move-SpotifyPlayback "74ASZWbe4lXaubB36ztrGX"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/transfer-a-users-playback
#>
function Move-SpotifyPlayback {
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" `
        -Body ([pscustomobject]@{ device_ids = @($DeviceId) } | ConvertTo-Json -Depth 99)
}

<#
.SYNOPSIS
Resume playback.

.DESCRIPTION
Resume current playback on the user's active device.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Resume-SpotifyPlayback

.EXAMPLE
Resume-SpotifyPlayback "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/start-a-users-playback
#>
function Resume-SpotifyPlayback {
    param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/play$($DeviceId ? "?device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Seek to position.

.DESCRIPTION
Seeks to the given position in the user’s currently playing track.

.PARAMETER Position
The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.
Example value: 25000.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Set-SpotifyPlaybackPosition 25000

.EXAMPLE
Set-SpotifyPlaybackPosition -Position 25000 -DeviceId "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/seek-to-position-in-currently-playing-track
#>
function Set-SpotifyPlaybackPosition {
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateRange(0, 2147483647)]
        [int] $Position,

        [Parameter(Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/seek?position_ms=$($Position)$($DeviceId ? "&device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Set repeat mode.

.DESCRIPTION
Set the repeat mode for the user's playback. Options are repeat-track, repeat-context, and off.

.PARAMETER State
'track' will repeat the current track.
'context' will repeat the current context.
'off' will turn repeat off.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Set-SpotifyPlaybackRepeat off

.EXAMPLE
Set-SpotifyPlaybackRepeat -State track -DeviceId "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/set-repeat-mode-on-users-playback
#>
function Set-SpotifyPlaybackRepeat {
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateSet("track", "context", "off")]
        [string] $State,

        [Parameter(Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/repeat?state=$($State)$($DeviceId ? "&device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Toggle playback shuffle.

.DESCRIPTION
Toggle shuffle on or off for user’s playback.

.PARAMETER State
'true': Shuffle user's playback.
'false': Do not shuffle user's playback.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Set-SpotifyPlaybackShuffle $false

.EXAMPLE
Set-SpotifyPlaybackShuffle -State $true -DeviceId "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/toggle-shuffle-for-users-playback
#>
function Set-SpotifyPlaybackShuffle {
    param (
        [Parameter(Mandatory, Position = 0)]
        [bool] $State,

        [Parameter(Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/shuffle?state=$($State)$($DeviceId ? "&device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Set playback volume.

.DESCRIPTION
Set the volume for the user’s current playback device.

.PARAMETER VolumePercent
The volume to set. Must be a value from 0 to 100 inclusive. Example value: 50.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Set-SpotifyPlaybackVolume 50

.EXAMPLE
Set-SpotifyPlaybackVolume -VolumePercent 25 -DeviceId "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/set-volume-for-users-playback
#>
function Set-SpotifyPlaybackVolume {
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateRange(0, 100)]
        [int] $VolumePercent,

        [Parameter(Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/volume?volume_percent=$($VolumePercent)$($DeviceId ? "&device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Skip to next.

.DESCRIPTION
Skips to next track in the user’s queue.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Skip-SpotifyNext

.EXAMPLE
Skip-SpotifyNext "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/skip-users-playback-to-next-track
#>
function Skip-SpotifyNext {
    param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/next$($DeviceId ? "?device_id=$($DeviceId)" : $null)" `
        -Method Post `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Skip to previous.

.DESCRIPTION
Skips to previous track in the user’s queue.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Skip-SpotifyPrevious

.EXAMPLE
Skip-SpotifyPrevious "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/skip-users-playback-to-previous-track
#>
function Skip-SpotifyPrevious {
    param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/previous$($DeviceId ? "?device_id=$($DeviceId)" : $null)" `
        -Method Post `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Start playback.

.DESCRIPTION
Start a new context playback on the user's active device.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.PARAMETER ContextUri
Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. Example: "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT".

.PARAMETER TrackUri
Optional. A JSON array of the Spotify track URIs to play. For example: "spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"

.PARAMETER Offset
Optional. Integer or string.
Indicates from where in the context playback should start. 
Only available when context_uri corresponds to an album or playlist. 
Example "5" or "spotify:track:1301WleyT98MSxVHPZCA6M".

.PARAMETER Position
Optional. Track position in milliseconds.

.EXAMPLE
Start-SpotifyPlayback `
    -ContextUri "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT" `
    -Offset 2

.EXAMPLE
Start-SpotifyPlayback `
    -TrackUri "6dOuyNJIAQC7ws10eEk0G9", "2Eqv3lSPNQCbtHfHTIlyKK", "4Xz2mxHREzWiEr0AyCJuU6" `
    -Offset "spotify:track:2Eqv3lSPNQCbtHfHTIlyKK" `
    -Position 5000 `
    -DeviceId "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/start-a-users-playback
#>
function Start-SpotifyPlayback {
    [CmdletBinding(PositionalBinding = $false)]
    param (
        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId,

        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string] $ContextUri,

        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string[]] $TrackUri,

        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string] $Offset,

        [Parameter()]
        [int] $Position
    )

    $body = @{}
    foreach ($p in $PSBoundParameters.Keys) {
        switch ($p) {
            "ContextUri" { $body.context_uri = $ContextUri }
            "TrackUri" { $body.uris = $TrackUri }
            "Offset" { $body.offset = $Offset.Contains("spotify:track:") ? [pscustomobject]@{ uri = $Offset } : [pscustomobject]@{ position = $Offset } }
            "Position" { $body.position_ms = $Position }
        }
    }

    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/play$($DeviceId ? "?device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" `
        -Body ($body | ConvertTo-Json -Depth 99)
}

<#
.SYNOPSIS
Pause playback.

.DESCRIPTION
Pause playback on the user's account.

.PARAMETER DeviceId
The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
Example value: "0d1841b0976bae2a3a310dd74c0f3df354899bc8".

.EXAMPLE
Suspend-SpotifyPlayback

.EXAMPLE
Suspend-SpotifyPlayback "0d1841b0976bae2a3a310dd74c0f3df354899bc8"

.FUNCTIONALITY
Player

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/pause-a-users-playback
#>
function Suspend-SpotifyPlayback {
    param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $DeviceId
    )
    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me/player/pause$($DeviceId ? "?device_id=$($DeviceId)" : $null)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
}

<#
.SYNOPSIS
Follow playlist.

.DESCRIPTION
Add the current user as a follower of a playlist.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.EXAMPLE
Add-SpotifyPlaylist -PlaylistId "3cEYpjA9oz9GiPac4AsH4n"

.EXAMPLE
"3cEYpjA9oz9GiPac4AsH4n", "37i9dQZF1DX91oIci4su1D" | Add-SpotifyPlaylist

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/follow-playlist
#>
function Add-SpotifyPlaylist {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, Position = 0, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [Alias("Id")]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId
    )
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)/followers" `
            -Method Put `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json" 
    }
}

<#
.SYNOPSIS
Add items to playlist.

.DESCRIPTION
Add one or more items to a user's playlist.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.PARAMETER TrackId
An array of Spotify URIs of the tracks or episodes to remove. For example: "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M". Can be more than 100.

.EXAMPLE
Add-SpotifyPlaylistTracks -PlaylistId "3cEYpjA9oz9GiPac4AsH4n" -TrackId "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"

.EXAMPLE
Get-SpotifySavedAlbums
| Get-SpotifyAlbumTracks
| Select-Object -ExpandProperty id -Unique
| Sort-Object { Get-Random }
| Add-SpotifyPlaylistTracks "69kakrmDURRcDTMOnI9PXX"

.EXAMPLE
Get-SpotifySavedTracks | Add-SpotifyPlaylistTracks "69kakrmDURRcDTMOnI9PXX"

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/add-tracks-to-playlist
#>
function Add-SpotifyPlaylistTracks {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId,

        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 1)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string[]] $TrackId
    )
    begin {
        $pipe = @()
    }
    process {
        $pipe += $TrackId
    }
    end {
        $c = [pscustomobject]@{ i = 0 }
        $pipe   
        | Group-Object -Property { [System.Math]::Floor($c.i++ / 100) }
        | ForEach-Object { [pscustomobject]@{ uris = $_.Group | ForEach-Object { "spotify:track:$($_)" } } }
        | ForEach-Object {
            Invoke-RestMethod `
                -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)/tracks" `
                -Method Post `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -Body ($_ | ConvertTo-Json -Depth 99)
        } 
        | Out-Null
    }
}

<#
.SYNOPSIS
Get playlist.

.DESCRIPTION 
Get a playlist owned by a Spotify user.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.EXAMPLE
Get-SpotifyPlaylist -PlaylistId "3cEYpjA9oz9GiPac4AsH4n"

.EXAMPLE
"3cEYpjA9oz9GiPac4AsH4n" | Get-SpotifyPlaylist

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-playlist
#>
function Get-SpotifyPlaylist {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)] 
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
    }
}

<#
.SYNOPSIS
Get playlist cover image.

.DESCRIPTION 
Get the current image associated with a specific playlist.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.EXAMPLE
Get-SpotifyPlaylistCover -PlaylistId "3cEYpjA9oz9GiPac4AsH4n"

.EXAMPLE
"3cEYpjA9oz9GiPac4AsH4n" | Get-SpotifyPlaylistCover

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-playlist-cover
#>
function Get-SpotifyPlaylistCover {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)/images" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
    }
}

<#
.SYNOPSIS
Get playlist items.

.DESCRIPTION
Get full details of the items of a playlist owned by a Spotify user.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.EXAMPLE
Get-SpotifyPlaylistTracks "3cEYpjA9oz9GiPac4AsH4n"

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-playlists-tracks
#>
function Get-SpotifyPlaylistTracks {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [string] $PlaylistId
    )

    process {
        $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/playlists/$($PlaylistId)/tracks?limit=100" }
        & { while ($r.next -and !$e) {
                $r = Invoke-RestMethod `
                    -Uri $r.next `
                    -Method Get `
                    -Authentication Bearer `
                    -Token $global:SpotifyToken `
                    -ContentType "application/json" `
                    -ErrorVariable "e"; $r 
            } 
        } 
        | Select-Object -ExpandProperty items
        | Select-Object -ExpandProperty track -Property * -ExcludeProperty is_local, track
        | ForEach-Object { 
            @() + $_ + $_.artists + $_.album + $_.album.artists 
            | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }
}

<#
.SYNOPSIS
Get current user's playlists.

.DESCRIPTION
Get a list of the playlists owned or followed by the current Spotify user.

.EXAMPLE
Get-SpotifySavedPlaylists

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-a-list-of-current-users-playlists
#>
function Get-SpotifySavedPlaylists {
    
    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/playlists?limit=50" }
    & { while ($r.next -and !$e) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -ErrorVariable "e"; $r 
        } 
    } 
    | Select-Object -ExpandProperty items
    | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
}

<#
.SYNOPSIS
Create playlist.

.DESCRIPTION
Create a playlist for a Spotify user. (The playlist will be empty until you add tracks.)

.PARAMETER UserId
The user's Spotify user ID. Example value: "smedjan".

.PARAMETER Name
The name for the new playlist, for example "Your Coolest Playlist". This name does not need to be unique; a user may have several playlists with the same name.

.PARAMETER Description
Value for playlist description as displayed in Spotify Clients and in the Web API.

.PARAMETER Public
Defaults to false. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private.

.PARAMETER Collaborative
Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public.

.EXAMPLE
$user = Get-SpotifyUser
New-SpotifyPlaylist -UserId $user.id -Name "New playlist" -Description "Awesome songs" -Public

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/create-playlist
#>
function New-SpotifyPlaylist {
    [CmdletBinding(PositionalBinding = $false)]
    param (
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string] $UserId,

        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string] $Name,
        
        [Parameter()]
        [string] $Description = $null,

        [Parameter()]
        [switch] $Public,

        [Parameter()]
        [switch] $Collaborative 
    )

    $body = @{
        name          = $Name
        public        = [bool]$Public
        collaborative = [bool]$Collaborative
    }
    
    if ($Description) {
        $body.description = $Description
    }

    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/users/$($UserId)/playlists" `
        -Method Post `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" `
        -Body ($body | ConvertTo-Json -Depth 99)
    | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
}

<#
.SYNOPSIS
Unfollow playlist.

.DESCRIPTION
Remove the current user as a follower of a playlist.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.EXAMPLE
Remove-SpotifyPlaylist -PlaylistId "3cEYpjA9oz9GiPac4AsH4n"

.EXAMPLE
"3cEYpjA9oz9GiPac4AsH4n", "37i9dQZF1DX91oIci4su1D" | Remove-SpotifyPlaylist

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/unfollow-playlist
#>
function Remove-SpotifyPlaylist {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, Position = 0, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [Alias("Id")]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId
    )
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)/followers" `
            -Method Delete `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
    }
}

<#
.SYNOPSIS
Remove playlist items.

.DESCRIPTION
Remove one or more items from a user's playlist.

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.PARAMETER TrackId
An array of Spotify URIs of the tracks or episodes to remove. For example: "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M". Can be more than 100.

.EXAMPLE
Remove-SpotifyPlaylistTracks -PlaylistId "3cEYpjA9oz9GiPac4AsH4n" -TrackId "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"

.EXAMPLE
"3cEYpjA9oz9GiPac4AsH4n"
| Get-SpotifyPlaylistTracks
| Remove-SpotifyPlaylistTracks "3cEYpjA9oz9GiPac4AsH4n"

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/remove-tracks-playlist
#>
function Remove-SpotifyPlaylistTracks {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId,

        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 1)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string[]] $TrackId
    )
    begin {
        $pipe = @()
    }
    process {
        $pipe += $TrackId
    }
    end {
        $c = [pscustomobject]@{ i = 0 }
        $pipe   
        | Group-Object -Property { [System.Math]::Floor($c.i++ / 100) }
        | ForEach-Object { [pscustomobject]@{ tracks = $_.Group | ForEach-Object { [pscustomobject]@{ uri = "spotify:track:$($_)" } } } }
        | ForEach-Object {
            Invoke-RestMethod `
                -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)/tracks" `
                -Method Delete `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -Body ($_ | ConvertTo-Json -Depth 99)
        } 
        | Out-Null
    }
}

<#
.SYNOPSIS
Change playlist details.

.DESCRIPTION
Change a playlist's name and public/private state. (The user must, of course, own the playlist.)

.PARAMETER PlaylistId
The Spotify ID of the playlist. Example value: "3cEYpjA9oz9GiPac4AsH4n".

.PARAMETER Name
The new name for the playlist, for example "My New Playlist Title".

.PARAMETER Description
Value for playlist description as displayed in Spotify Clients and in the Web API.

.PARAMETER Public
If true the playlist will be public, if false it will be private.

.PARAMETER Collaborative
If true, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. Note: You can only set collaborative to true on non-public playlists.

.EXAMPLE
Update-Playlist -PlaylistId "3cEYpjA9oz9GiPac4AsH4n" -Name "New name" -Public $false

.FUNCTIONALITY
Playlist

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/change-playlist-details
#>
function Update-SpotifyPlaylist {
    [CmdletBinding(PositionalBinding = $false)]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $PlaylistId,

        [Parameter(Mandatory = $false)]
        [ValidateNotNullOrEmpty()]
        [string] $Name,

        [Parameter(Mandatory = $false)]
        [ValidateNotNullOrEmpty()]
        [string] $Description,

        [Parameter(Mandatory = $false)]
        [bool] $Public,

        [Parameter(Mandatory = $false)]
        [bool] $Collaborative
    )

    $body = @{}

    if ($PSBoundParameters.ContainsKey("Name")) {
        $body.name = $Name
    }

    if ($PSBoundParameters.ContainsKey("Description")) {
        $body.description = if ($Description) { $Description } else { "" }
    }

    if ($PSBoundParameters.ContainsKey("Public")) {
        $body.public = $Public
    }

    if ($PSBoundParameters.ContainsKey("Collaborative")) {
        $body.collaborative = $Collaborative
    }

    $null = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/playlists/$($PlaylistId)" `
        -Method Put `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" `
        -Body ([pscustomobject]$body | ConvertTo-Json -Depth 99)
}

<#
.SYNOPSIS
Search for item.

.DESCRIPTION
Get Spotify catalog information about albums, artists, playlists, tracks, shows or episodes that match a keyword string.

.PARAMETER Query
Your search query. You can narrow down your search using field filters.
The available filters are album, artist, track, year, upc, tag:hipster, tag:new, isrc, and genre.
Each field filter only applies to certain result types.
The artist and year filters can be used while searching albums, artists and tracks.
You can filter on a single year or a range (e.g. 1955-1960).
The album filter can be used while searching albums and tracks.
The genre filter can be used while searching artists and tracks.
The isrc and track filters can be used while searching tracks.
The upc, tag:new and tag:hipster filters can only be used while searching albums.
The tag:new filter will return albums released in the past two weeks and tag:hipster can be used to return only albums with the lowest 10% popularity.
Example value: "remaster track:Doxy artist:Miles Davis".

.PARAMETER Type
A comma-separated list of item types to search across. Search results include hits from all the specified item types. 
Allowed values: "album", "artist", "playlist", "track", "show", "episode". Example value: "track artist"

.EXAMPLE
Find-SpotifyItem "remaster track:Doxy artist:Miles Davis"

.EXAMPLE
Find-SpotifyItem -Query "rock" -Type playlist, track

.FUNCTIONALITY
Searh

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/search
#>
function Find-SpotifyItem {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string] $Query,

        [Parameter(Mandatory, Position = 1)]
        [ValidateSet("album", "artist", "playlist", "track", "show", "episode")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 6)]
        [string[]] $Type
    )
    $r = Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/search?q=$([System.Web.HTTPUtility]::UrlEncode($Query))&type=$($Type -join ',')&limit=50" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"

    if ($r.playlists.items) {
        $r.playlists.items
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
    }

    if ($r.albums.items) {
        $r.albums.items
        | ForEach-Object { 
            @() + $_ + $_.artists | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }

    if ($r.tracks.items) {
        $r.tracks.items
        | ForEach-Object { 
            @() + $_ + $_.artists + $_.album + $_.album.artists 
            | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }

    if ($r.artists.items) {
        $r.artists.items
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
    }

    if ($r.shows.items) {
        $r.shows.items
    }

    if ($r.episodes.items) {
        $r.episodes.items
    }
}

<#
.SYNOPSIS
Save tracks for current user.

.DESCRIPTION
Save one or more tracks to the current user's 'Your Music' library.

.PARAMETER TrackId
A list of the Spotify IDs. For example: "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M". Maximum: 50 IDs.

.EXAMPLE
Add-SpotifyTrack -TrackId "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"

.EXAMPLE
Get-SpotifyAlbumTracks -AlbumId "4aawyAB9vmqN3uQ7FjRGTy" | Add-SpotifyTrack

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/save-tracks-user
#>
function Add-SpotifyTrack {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 50)]
        [string[]] $TrackId
    )
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/tracks" `
            -Method Put `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -Body (, $TrackId | ConvertTo-Json) `
            -ContentType "application/json"    
    }
}

<#
.SYNOPSIS
Get recommendations.

.DESCRIPTION
Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. 
If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.
For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.

.EXAMPLE
Get-SpotifyRecommendations -SeedArtists "2CIMQHirSU0MQqyYHq0eOx", "57dN52uHvrHOxijzpIgu3E" -MinEnergy 0.8 -MaxEnergy 1 -TargetDanceability 1

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-recommendations
#>
function Get-SpotifyRecommendations {
    [CmdletBinding(PositionalBinding = $false)]
    param (

        # A list of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres. Example value: "4NHQUGzhtTLFvgF5SZesLK".
        [Parameter()]
        [ValidateCount(0, 5)]
        [Alias("seed_artists")]
        [string[]] $SeedArtists,
        
        # A list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres. Example value: "classical,country".
        [Parameter()]
        [ValidateCount(0, 5)]
        [Alias("seed_genres")]
        [string[]] $SeedGenres,

        # A list of Spotify IDs for a seed track. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres. Example value: "0c6xIDDpzE81m2q797ordA".
        [Parameter()]
        [ValidateCount(0, 5)]
        [Alias("seed_tracks")]
        [string[]] $SeedTracks,

        # Double 0..1
        [Parameter()]
        [Alias("max_acousticness")]
        [double] $MaxAcousticness,

        # Double 0..1
        [Parameter()]
        [Alias("max_danceability")]
        [double] $MaxDanceability,

        # Integer
        [Parameter()]
        [Alias("max_duration_ms")]
        [int] $MaxDurationMs,

        # Double 0..1
        [Parameter()]
        [Alias("max_energy")]
        [double] $MaxEnergy,

        # Double 0..1
        [Parameter()]
        [Alias("max_instrumentalness")]
        [double] $MaxInstrumentalness,

        # Integer 0..11
        [Parameter()]
        [Alias("max_key")]
        [int] $MaxKey,

        # Double 0..1
        [Parameter()]
        [Alias("max_liveness")]
        [double] $MaxLiveness,

        # Double
        [Parameter()]
        [Alias("max_loudness")]
        [double] $MaxLoudness,

        # Integer 0..1
        [Parameter()]
        [Alias("max_mode")]
        [int] $MaxMode,

        # Integer 0..100
        [Parameter()]
        [Alias("max_popularity")]
        [int] $MaxPopularity,

        # Double 0..1
        [Parameter()]
        [Alias("max_speechiness")]
        [double] $MaxSpeechiness,

        # Double (bpm)
        [Parameter()]
        [Alias("max_tempo")]
        [double] $MaxTempo,

        # Integer
        [Parameter()]
        [Alias("max_time_signature")]
        [int] $MaxTimeSignature,

        # Double 0..1
        [Parameter()]
        [Alias("max_valence")]
        [double] $MaxValence,

        # Double 0..1
        [Parameter()]
        [Alias("min_acousticness")]
        [double] $MinAcousticness,

        # Double 0..1
        [Parameter()]
        [Alias("min_danceability")]
        [double] $MinDanceability,

        # Integer
        [Parameter()]
        [Alias("min_duration_ms")]
        [int] $MinDurationMs,

        # Double 0..1
        [Parameter()]
        [Alias("min_energy")]
        [double] $MinEnergy,

        # Double 0..1
        [Parameter()]
        [Alias("min_instrumentalness")]
        [double] $MinInstrumentalness,

        # Integer 0..11
        [Parameter()]
        [Alias("min_key")]
        [int] $MinKey,

        # Double 0..1
        [Parameter()]
        [Alias("min_liveness")]
        [double] $MinLiveness,

        # Double
        [Parameter()]
        [Alias("min_loudness")]
        [double] $MinLoudness,

        # Double 0..1
        [Parameter()]
        [Alias("min_mode")]
        [int] $MinMode,

        # Integer 0..100
        [Parameter()]
        [Alias("min_popularity")]
        [int] $MinPopularity,

        # Double 0..1
        [Parameter()]
        [Alias("min_speechiness")]
        [double] $MinSpeechiness,

        # Double
        [Parameter()]
        [Alias("min_tempo")]
        [double] $MinTempo,

        # Integer
        [Parameter()]
        [Alias("min_time_signature")]
        [int] $MinTimeSignature,

        # Double 0..1
        [Parameter()]
        [Alias("min_valence")]
        [double] $MinValence,

        # Double 0..1
        [Parameter()]
        [Alias("target_acousticness")]
        [double] $TargetAcousticness,
 
        # Double 0..1
        [Parameter()]
        [Alias("target_danceability")]
        [double] $TargetDanceability,

        # Integer
        [Parameter()]
        [Alias("target_duration_ms")]
        [int] $TargetDurationMs,

        # Double 0..1
        [Parameter()]
        [Alias("target_energy")]
        [double] $TargetEnergy,

        # Double 0..1
        [Parameter()]
        [Alias("target_instrumentalness")]
        [double] $TargetInstrumentalness,

        # Integer 0..11
        [Parameter()]
        [Alias("target_key")]
        [int] $TargetKey,

        # Double 0..1
        [Parameter()]
        [Alias("target_liveness")]
        [double] $TargetLiveness,

        # Double
        [Parameter()]
        [Alias("target_loudness")]
        [double] $TargetLoudness,

        # Integer 0..1
        [Parameter()]
        [Alias("target_mode")]
        [int] $TargetMode,

        # Integer 0..100
        [Parameter()]
        [Alias("target_popularity")]
        [int] $TargetPopularity,

        # Double 0..1
        [Parameter()]
        [Alias("target_speechiness")]
        [double] $TargetSpeechiness,

        # Double (bpm)
        [Parameter()]
        [Alias("target_tempo")]
        [double] $TargetTempo,

        # Integer
        [Parameter()]
        [Alias("target_time_signature")]
        [int] $TargetTimeSignature,

        # Double 0..1
        [Parameter()]
        [Alias("target_valence")]
        [double] $TargetValence
    )

    $e = @{}
    $c = Get-Command Get-SpotifyRecommendations
    foreach ($p in $PSBoundParameters.Keys) {
        $v = $PSBoundParameters[$p]
        $e[$c.Parameters[$p].Aliases[0]] = $v.Count ? $v -join "," : $v
    }
    
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/recommendations?limit=100&$(($e.Keys | ForEach-Object { "$($_)=$($e[$_])" }) -join "&")" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json"
    | Select-Object -ExpandProperty tracks
    | ForEach-Object { 
        @() + $_ + $_.artists + $_.album + $_.album.artists 
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}

<#
.SYNOPSIS
Get user's saved tracks.

.DESCRIPTION
Get a list of the songs saved in the current Spotify user's 'Your Music' library.

.EXAMPLE
Get-SpotifySavedTracks

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-saved-tracks
#>
function Get-SpotifySavedTracks {
    
    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/tracks?limit=50" }
    & { while ($r.next -and !$e) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json" `
                -ErrorVariable "e"; $r 
        } 
    } 
    | Select-Object -ExpandProperty items
    | Select-Object -ExpandProperty track -Property * -ExcludeProperty track
    | ForEach-Object { 
        @() + $_ + $_.artists + $_.album + $_.album.artists 
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}

<#
.SYNOPSIS
Get track.

.DESCRIPTION 
Get Spotify catalog information for a single track identified by its unique Spotify ID.

.PARAMETER TrackId
The Spotify ID for the track. Example value: "11dFghVXANMlKmJXsNCbNl".

.EXAMPLE
Get-SpotifyTrack -TrackId "11dFghVXANMlKmJXsNCbNl"

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-track
#>
function Get-SpotifyTrack {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $TrackId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/tracks/$($TrackId)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
        | ForEach-Object { 
            @() + $_ + $_.artists + $_.album + $_.album.artists 
            | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
        }
    }
}

<#
.SYNOPSIS
Get track's audio analysis.

.DESCRIPTION
Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.

.PARAMETER TrackId
The Spotify ID for the track. Example value: "11dFghVXANMlKmJXsNCbNl".

.EXAMPLE
Get-SpotifyTrackAnalysis -TrackId "11dFghVXANMlKmJXsNCbNl"

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-audio-analysis
#>
function Get-SpotifyTrackAnalysis {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $TrackId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/audio-analysis/$($TrackId)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
    }
}

<#
.SYNOPSIS
Get track's audio features.

.DESCRIPTION
Get audio feature information for a single track identified by its unique Spotify ID.

.PARAMETER TrackId
The Spotify ID for the track. Example value: "11dFghVXANMlKmJXsNCbNl".

.EXAMPLE
Get-SpotifyTrackFeatures -TrackId "11dFghVXANMlKmJXsNCbNl"

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-audio-features
#>
function Get-SpotifyTrackFeatures {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [string] $TrackId
    )
    process {
        Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/audio-features/$($TrackId)" `
            -Method Get `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -ContentType "application/json"
    }
}

<#
.SYNOPSIS
Remove tracks for current user.

.DESCRIPTION
Remove one or more tracks from the current user's 'Your Music' library.

.PARAMETER TrackId
A list of the Spotify IDs. For example: "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M". Maximum: 50 IDs.

.EXAMPLE
Remove-SpotifyTrack -TrackId "4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"

.EXAMPLE
Get-SpotifyAlbumTracks -AlbumId "4aawyAB9vmqN3uQ7FjRGTy" | Remove-SpotifyTrack

.FUNCTIONALITY
Track

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/remove-tracks-user
#>
function Remove-SpotifyTrack {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]
        [Alias("id")]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(1, 50)]
        [string[]] $TrackId
    )
    process {
        $null = Invoke-RestMethod `
            -Uri "https://api.spotify.com/v1/me/tracks" `
            -Method Delete `
            -Authentication Bearer `
            -Token $global:SpotifyToken `
            -Body (, $TrackId | ConvertTo-Json) `
            -ContentType "application/json"    
    }
}

<#
.SYNOPSIS
Refreshes authorization token for Spotify Web API.

.DESCRIPTION
Refreshes the existing authorization token and configures global variables. 
Call this command if you get the "401 token expired" error. 
Put this command at the top of your script.

.PARAMETER StatePath
Path to a file to store client information and authorization token.

.EXAMPLE
Update-SpotifyAccessToken

.FUNCTIONALITY
Base

.LINK
https://developer.spotify.com/dashboard/applications

#>
function Update-SpotifyAccessToken {
    [CmdletBinding(PositionalBinding = $false)]
    param(
        [switch] $PassThru,    
        [string] $StatePath = "$HOME/.spotify-pwsh-state"
    )
    try {
        $state = Get-Content $StatePath | ConvertFrom-Json -Depth 99
        $token = Invoke-RestMethod `
            -Uri "https://accounts.spotify.com/api/token" `
            -Method Post `
            -Body "grant_type=refresh_token&refresh_token=$($state.Token.refresh_token)&client_id=$($state.ClientId)" `
            -ContentType "application/x-www-form-urlencoded" `
            -ErrorAction Stop

        $state.Token = $token
        $state | ConvertTo-Json -Depth 99 | Out-File $StatePath -Force
        $global:SpotifyToken = ConvertTo-SecureString $token.access_token -AsPlainText -Force

        if ($PassThru) {
            Write-Output $token
        }
    }
    catch {
        throw $_
    }
}

<#
.SYNOPSIS
Get current user's profile.

.DESCRIPTION
Get detailed profile information about the current user (including the current user's username).

.EXAMPLE
Get-SpotifyUser

.FUNCTIONALITY
User

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-current-users-profile
#>
function Get-SpotifyUser {
    Invoke-RestMethod `
        -Uri "https://api.spotify.com/v1/me" `
        -Method Get `
        -Authentication Bearer `
        -Token $global:SpotifyToken `
        -ContentType "application/json" 
}

<#
.SYNOPSIS
Get user's top artists.

.DESCRIPTION
Get the current user's top artists based on calculated affinity.

.PARAMETER Term
Over what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks).

.EXAMPLE
Get-SpotifyUserTopArtists

.EXAMPLE
Get-SpotifyUserTopArtists long_term

.FUNCTIONALITY
User

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-top-artists-and-tracks
#>
function Get-SpotifyUserTopArtists {
    param (
        [Parameter(Position = 0)]
        [ValidateSet("short_term", "medium_term", "long_term")]
        [string] $Term = "medium_term"
    )

    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/top/artists?time_range=$Term&limit=50" }
    & { while ($r.next) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json"; $r 
            break
        }
    } 
    | Select-Object -ExpandProperty items
    | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)"); $_ }
}

<#
.SYNOPSIS
Get user's top tracks.

.DESCRIPTION
Get the current user's top tracks based on calculated affinity.

.PARAMETER Term
Over what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks).

.EXAMPLE
Get-SpotifyUserTopTracks

.EXAMPLE
Get-SpotifyUserTopTracks long_term

.FUNCTIONALITY
User

.LINK
https://developer.spotify.com/documentation/web-api/reference/#/operations/get-users-top-artists-and-tracks
#>
function Get-SpotifyUserTopTracks {
    param (
        [Parameter(Position = 0)]
        [ValidateSet("short_term", "medium_term", "long_term")]
        [string] $Term = "medium_term"
    )

    $r = [pscustomobject]@{ next = "https://api.spotify.com/v1/me/top/tracks?time_range=$Term&limit=50" }
    & { while ($r.next) {
            $r = Invoke-RestMethod `
                -Uri $r.next `
                -Method Get `
                -Authentication Bearer `
                -Token $global:SpotifyToken `
                -ContentType "application/json"; $r 
            break
        }
    } 
    | Select-Object -ExpandProperty items
    | ForEach-Object { 
        @() + $_ + $_.artists + $_.album + $_.album.artists 
        | ForEach-Object { $_.PSObject.TypeNames.Add("spfy.$($_.type)") }; $_
    }
}
