# VERSION

$m = Test-ModuleManifest $PSScriptRoot/module/Spotify.psd1
$v_major = $m.Version.Major
$v_minor = $m.Version.Minor
$v_build = $m.Version.Build

$increase_version = $false # set to $true if needed
if ($increase_version) {
  $v_build += 1
}

# FILES

$files = Get-ChildItem -Path $PSScriptRoot/functions/*.ps1 -Exclude *.Tests.ps1 -Recurse | Sort-Object -Property FullName
$files | Format-Table FullName

# PSM1

$script = 
@"
# ---------
# DO NOT EDIT THIS FILE. 
# This file is auto-generated. 
# Version: $($v_major).$($v_minor).$($v_build)
# ---------

$($files | ForEach-Object { (Get-Content $_.FullName | Out-String).Trim() }| Join-String -Separator "`n`n")
"@ 

Set-Content -Value $script -Path $PSScriptRoot/module/Spotify.psm1

# PS1XML

$formats = 
@"
<?xml version="1.0" encoding="utf-8" ?>
<Configuration>
  <ViewDefinitions>
  $(Get-ChildItem $PSScriptRoot/formats/*.ps1xml | ForEach-Object { ([xml](Get-Content $_)).Configuration.ViewDefinitions.View.OuterXml })
  </ViewDefinitions>
</Configuration>
"@

([xml]$formats).Save("$($PSScriptRoot)/module/Spotify.Formats.ps1xml");

# PSD1

if ($increase_version) {
  Update-ModuleManifest `
    -Path $PSScriptRoot/module/Spotify.psd1 `
    -FunctionsToExport ($files | ForEach-Object { $_.BaseName }) `
    -ModuleVersion "$($v_major).$($v_minor).$($v_build)"
}

# ZIP

Remove-Item "package" -Force -Confirm:$false -Recurse -ErrorAction SilentlyContinue | Out-Null
New-Item -ItemType Directory -Path "package/Spotify" | Out-Null
Copy-Item -Path "module/*" -Destination "package/Spotify" -Force
Compress-Archive -Path "package/Spotify" -DestinationPath "package/Spotify-PowerShell-$($v_major).$($v_minor).$($v_build).zip"
Remove-Item "package/Spotify" -Force -Confirm:$false -Recurse | Out-Null

